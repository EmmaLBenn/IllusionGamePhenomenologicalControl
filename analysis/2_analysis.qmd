---
title: "Illusion Game & PCS"
subtitle: "Analysis"
date: "`r Sys.Date()`"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: false
    toc: true
    warning: false 
    message: false 
execute: 
  cache: true
---

## Data Preparation 

```{r}
library(tidyverse)
library(ggdist)
library(ggside)
library(easystats)
library(patchwork)
library(psych)


# data_ppt <- read.csv("https://raw.githubusercontent.com/RealityBending/IllusionGamePhenomenologicalControl/refs/heads/main/data/rawdata_participants.csv")

data_ppt <- read.csv("../data/data_participants.csv")

data_ig <- read.csv("../data/data_IllusionGame.csv") |>
  group_by(Illusion_Type) |> 
  mutate(Illusion_Side = sign(Illusion_Difference), 
    Illusion_Effect = ifelse(sign(Illusion_Strength) > 0, "Incongruent", "Congruent"),
    Task_Difficulty = abs(Illusion_Difference),
      Illusion_Group = case_when(
        Illusion_Effect == "Congruent" ~ "Congruent",
        Illusion_Effect == "Incongruent" & Illusion_Strength <= median(Illusion_Strength[Illusion_Effect == "Incongruent"], na.rm = TRUE) ~ "Mild",
        Illusion_Effect == "Incongruent" & Illusion_Strength > median(Illusion_Strength[Illusion_Effect == "Incongruent"], na.rm = TRUE) ~ "Strong"),
    Condition_Difficulty = datawizard::categorize(Task_Difficulty, split="quantile", n_groups=2, labels=c("Hard", "Easy"))) |> 
  ungroup() |>
  mutate(
    Block = as.factor(Block),
    Illusion_Side = as.factor(Illusion_Side),
    Illusion_Effect = fct_relevel(as.factor(Illusion_Effect), "Incongruent", "Congruent"),
    Response_Correct = as.factor(Response_Correct)
  ) 

```

## PCS 

### Compute subjective scale score

**Note:** Mean subjective scale responses for item 4 (Taste) and item 10 (Post-session suggestion) are each generated from the combination of two responses which require processing prior to generating an overall subjective score. 
The subjective score for item 4 is the mean of the responses to the (a)‘sour’ and (b)‘sweet’ sub-scales for the taste suggestion. 
The subjective score for item 10 is the geometric mean (the square root of the product) of he responses to the (a) ‘urge’ and (b) ‘amnesia’ sub-scales for the post-session suggestion. 

```{r}
data_ppt$pcs_tastescore <- rowMeans(data_ppt[grepl("taste", names(data_ppt))])
data_ppt$pcs_postsessionsuggetsion <- sqrt(data_ppt$pcs_urgepress * data_ppt$pcs_memorypress)
data_ppt$pcs <- rowMeans(data_ppt[, c("pcs_handslow", "pcs_mosquito", "pcs_magnetichands", "pcs_armrigidity", "pcs_tastescore", "pcs_postsessionsuggetsion", "pcs_armimmobile", "pcs_music", "pcs_negativehallucination", "pcs_amnesia")], na.rm = TRUE)
data_ppt$pcs_SD <- sd(data_ppt$pcs, na.rm = TRUE)

```

### Reliability

```{r}

pcs_rel <- data_ppt |>
  select("pcs_handslow", "pcs_mosquito", "pcs_magnetichands", "pcs_armrigidity", "pcs_tastescore", "pcs_postsessionsuggetsion", "pcs_armimmobile", "pcs_music", "pcs_negativehallucination", "pcs_amnesia") |>
  psych::alpha()

```


## Illusion Sensitivity Scores 

### Error Rate 

```{r}
errorrate <- data_ig |>
  group_by(Participant, Illusion_Type, Illusion_Group) |>
  summarize(ErrorRate = sum(Error) / n()) |>
  ungroup() |>
  as.data.frame()
```

### IES 

**Note.** The IES is calculated by dividing the *average correct* RT by the *proportion of correct responses*, for each illusion and for each illusion strenght group: Strong Illusion Strength & Incongruent, Mild Illusion Strength & Incongruent, and Congruent

```{r}

IES <- data_ig |>
  group_by(Participant, Illusion_Type, Illusion_Group) |>
  summarise(IES = mean(RT[Response_Correct == "true"] / mean(Response_Correct == "true"))) |>
  ungroup() |>
  as.data.frame()
``` 

```{r}

data_vs <- left_join(IES, errorrate, by= c("Participant", "Illusion_Type", "Illusion_Group"))
```

### Correlations between Strong and Mild 

**Note**.  If correlations high between mild and strong conditions then the mild and strong illusion strength groups will be collapsed and the outcomes will be recomputed across all trials, otherwise they will be treated as separate in subsequent analyses.

```{r}

compute_correlation <- function(data, illusion_type) {
  illusion_data <- data |> dplyr::filter(Illusion_Group != "Congruent", Illusion_Type == illusion_type) |>
    pivot_wider(id_cols = Participant,
      names_from = Illusion_Group,
      values_from = c(ErrorRate, IES),
      names_sep = "_") 
  
  ER_Incongruent <- BayesFactor::correlationBF(
    y = illusion_data$ErrorRate_Mild, 
    x = illusion_data$ErrorRate_Strong
  )
  
  IES_Incongruent <- BayesFactor::correlationBF(
    y = illusion_data$IES_Mild, 
    x = illusion_data$IES_Strong
  )
  
  return(list(
    ER_Incongruent = ER_Incongruent,
    IES_Incongruent = IES_Incongruent
  ))
}

```

```{r}

cor_ebbinghaus <- compute_correlation(data_vs, "Ebbinghaus")
cor_mullerlyer <- compute_correlation(data_vs, "MullerLyer")
cor_verticalhorizontal <- compute_correlation(data_vs, "VerticalHorizontal")
```

```{r}

er_ebbinghaus_post<- describe_posterior(cor_ebbinghaus$ER_Incongruent)
er_mullerlyer_post <- describe_posterior(cor_mullerlyer$ER_Incongruent)
er_verticalhorizontal_post <- describe_posterior(cor_verticalhorizontal$ER_Incongruent)
```

```{r}

ies_ebbinghaus_post <- describe_posterior(cor_ebbinghaus$IES_Incongruent)
ies_mullerlyer_post <- describe_posterior(cor_mullerlyer$IES_Incongruent)
ies_verticalhorizontal_post <- describe_posterior(cor_verticalhorizontal$IES_Incongruent)

```


### Colapsed scores 

```{r}



```

### Illusion Manipulation Checks

**Note:** Significant differences between the Congruent and Mild and the Mild and Strong groups will be taken as evidence that illsuions functioned as intended

```{r}
compute_ttest <- function(data, illusion_type) {
  illusion_data <- data |> dplyr::filter(Illusion_Type == illusion_type)

  ERcongruent_vs_mild <- BayesFactor::ttestBF(
    x = illusion_data$ErrorRate[illusion_data$Illusion_Group == "Congruent"],
    y = illusion_data$ErrorRate[illusion_data$Illusion_Group == "Mild"],
    paired = TRUE
  )
  
  IEScongruent_vs_mild <- BayesFactor::ttestBF(
    x = illusion_data$IES[illusion_data$Illusion_Group == "Congruent"],
    y = illusion_data$IES[illusion_data$Illusion_Group == "Mild"],
    paired = TRUE
  )
  
  ERmild_vs_strong <- BayesFactor::ttestBF(
    x = illusion_data$ErrorRate[illusion_data$Illusion_Group == "Mild"],
    y = illusion_data$ErrorRate[illusion_data$Illusion_Group == "Strong"],
    paired = TRUE
  ) 
   
   
  IESmild_vs_strong <- BayesFactor::ttestBF(
    x = illusion_data$IES[illusion_data$Illusion_Group == "Mild"],
    y = illusion_data$IES[illusion_data$Illusion_Group == "Strong"],
    paired = TRUE
  )

  return(list(
    ERcongruent_vs_mild = ERcongruent_vs_mild,
    ERmild_vs_strong = ERmild_vs_strong,
    IEScongruent_vs_mild = IEScongruent_vs_mild,
    IESmild_vs_strong = IESmild_vs_strong
  ))
}

````

```{r}

ttest_ebbinghaus <- compute_ttest(data_vs, "Ebbinghaus")
ttest <- compute_ttest(data_vs, "MullerLyer")
ttest_verticalhorizontal <- compute_ttest(data_vs, "VerticalHorizontal")
```

```{r}

er_ebbinghaus_post_cm <- describe_posterior(ttest_ebbinghaus$ERcongruent_vs_mild)
er_ebbinghaus_post_ms <- describe_posterior(ttest_ebbinghaus$ERmild_vs_strong)

er_mullerlyer_post_cm <- describe_posterior(ttest_mullerlyer$ERcongruent_vs_mild)
bf_mullerlyer_post_ms <- describe_posterior(ttest_mullerlyer$ERmild_vs_strong)

er_verticalhorizontal_post_cm <- describe_posterior(ttest_verticalhorizontal$ERcongruent_vs_mild)
er_verticalhorizontal_post_ms <- describe_posterior(ttestcor_verticalhorizontal$ERmild_vs_strong)
```

```{r}

IES_ebbinghaus_post_cm <- describe_posterior(cor_ebbinghaus$IEScongruent_vs_mild)
IES_ebbinghaus_post_ms <- describe_posterior(cor_ebbinghaus$IESmild_vs_strong)

IES_mullerlyer_post_cm <- describe_posterior(cor_mullerlyer$IEScongruent_vs_mild)
IES_mullerlyer_post_ms <- describe_posterior(cor_mullerlyer$IESmild_vs_strong)

IES_verticalhorizontal_post_cm <- describe_posterior(cor_verticalhorizontal$IEScongruent_vs_mild)
IES_verticalhorizontal_post_ms <- describe_posterior(cor_verticalhorizontal$IESmild_vs_strong)
```


