---
title: "Illusion Game & PCS"
subtitle: "Illusion Task"
date: "`r Sys.Date()`"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: false
    toc: true
execute: 
  cache: true
---


## Data Preparation

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(ggdist)
library(ggside)
library(easystats)
library(patchwork)
library(psych)


logmod <- function(x) sign(x) * log(1 + abs(x))
sqrtmod <- function(x) sign(x) * sqrt(abs(x))
cbrtmod <- function(x) sign(x) * (abs(x)**(1 / 3))

# data_ppt <- read.csv("https://raw.githubusercontent.com/RealityBending/IllusionGamePhenomenologicalControl/refs/heads/main/data/rawdata_participants.csv")

data_ppt <- read.csv("C:/Users/asf25/Desktop/studies/IllusionGamePhenomenologicalControl/data/rawdata_participants.csv")

# df <- read.csv("https://raw.githubusercontent.com/RealityBending/IllusionGamePhenomenologicalControl/refs/heads/main/data/data_participants.csv")  |>
  # group_by(Illusion_Type) |> 
  # mutate(Illusion_Side = sign(Illusion_Difference), 
  #   Illusion_Effect = ifelse(sign(Illusion_Strength) > 0, "Incongruent", "Congruent"),
  #   Task_Difficulty = abs(Illusion_Difference),
  #        Condition_Illusion = datawizard::categorize(
  #          Illusion_Strength, split="quantile", n_groups=4,
  #          labels=c("Congruent - Strong", "Congruent - Mild", "Incongruent - Mild", "Incongruent - Strong")),
  #        Condition_Difficulty = datawizard::categorize(Task_Difficulty, split="quantile", n_groups=2, labels=c("Hard", "Easy"))) |> 
  # ungroup() |>
  # mutate(
  #   Block = as.factor(Block),
  #   Illusion_Side = as.factor(Illusion_Side),
  #   Illusion_Effect = fct_relevel(as.factor(Illusion_Effect), "Incongruent", "Congruent")
  # ) 
  #  
    
#taken from illusion game international
data_ig <- read.csv("../data/data_IllusionGame.csv") |>
  group_by(Illusion_Type) |> 
  mutate(Illusion_Side = sign(Illusion_Difference), 
    Illusion_Effect = ifelse(sign(Illusion_Strength) > 0, "Incongruent", "Congruent"),
    Task_Difficulty = abs(Illusion_Difference),
      Condition_Illusion = case_when(
        Illusion_Effect == "Congruent" ~ "Congruent",
        Illusion_Effect == "Incongruent" & Illusion_Strength <= median(Illusion_Strength[Illusion_Effect == "Incongruent"], na.rm = TRUE) ~ "Mild",
        Illusion_Effect == "Incongruent" & Illusion_Strength > median(Illusion_Strength[Illusion_Effect == "Incongruent"], na.rm = TRUE) ~ "Strong"),
    Condition_Difficulty = datawizard::categorize(Task_Difficulty, split="quantile", n_groups=2, labels=c("Hard", "Easy"))) |> 
  ungroup() |>
  mutate(
    Block = as.factor(Block),
    Illusion_Side = as.factor(Illusion_Side),
    Illusion_Effect = fct_relevel(as.factor(Illusion_Effect), "Incongruent", "Congruent"),
    Response_Correct = as.factor(Response_Correct)
  ) 
```

## PCS 

### Compute subjective scale score

*Note:* Mean subjective scale responses for item 4 (Taste) and item 10 (Post-session suggestion) are each generated from the combination of two responses which require processing prior to generating an overall subjective score. 
The subjective score for item 4 is the mean of the responses to the (a)‘sour’ and (b)‘sweet’ sub-scales for the taste suggestion. 
The subjective score for item 10 is the geometric mean (the square root of the product) of he responses to the (a) ‘urge’ and (b) ‘amnesia’ sub-scales for the post-session suggestion. 

```{r}
data_ppt$pcs_tastescore <- rowMeans(data_ppt[grepl("taste", names(data_ppt))])
data_ppt$pcs_postsessionsuggetsion <- sqrt(data_ppt$pcs_urgepress * data_ppt$pcs_memorypress)
data_ppt$pcs <- rowMeans(data_ppt[, c("pcs_handslow", "pcs_mosquito", "pcs_magnetichands", "pcs_armrigidity", "pcs_tastescore", "pcs_postsessionsuggetsion", "pcs_armimmobile", "pcs_music", "pcs_negativehallucination", "pcs_amnesia")], na.rm = TRUE)
data_ppt$pcs_SD <- sd(data_ppt$pcs, na.rm = TRUE)

```

### Reliability
```{r}

data_ppt |>
  select("pcs_handslow", "pcs_mosquito", "pcs_magnetichands", "pcs_armrigidity", "pcs_tastescore", "pcs_postsessionsuggetsion", "pcs_armimmobile", "pcs_music", "pcs_negativehallucination", "pcs_amnesia") |>
  psych::alpha()

```


## Illusion 

### Error rate

**Note.** Error rate computed by dividing  the number of errors by the total number of trials. 

```{r}

Error_rate <- data_ig |>
  group_by(Participant, Illusion_Type, Condition_Illusion) |>
  summarise(
    incorrect_responses = sum(Response_Correct == "false", na.rm = TRUE),
    total_responses = n(),
    error_rate = (incorrect_responses / total_responses) * 100
  )

Error_rate

``` 


#### Difference in Error rate between each condition and illusion type

::: {.panel-tabset}

##### Ebbinghaus 

```{r}

ER_ebbinghaus <- Error_rate |> filter(Illusion_Type == "Ebbinghaus")

ER_CongruentMild_ebbinghaus_BF <- BayesFactor::ttestBF(
  x = ER_ebbinghaus$error_rate[ER_ebbinghaus$Condition_Illusion == "Congruent"],
  y = ER_ebbinghaus$error_rate[ER_ebbinghaus$Condition_Illusion == "Mild"],
  paired = TRUE
)

ER_StrongMild_ebbinghaus_BF <- BayesFactor::ttestBF(
  x = ER_ebbinghaus$error_rate[ER_ebbinghaus$Condition_Illusion == "Mild"],
  y = ER_ebbinghaus$error_rate[ER_ebbinghaus$Condition_Illusion == "Strong"],
  paired = TRUE
)

```

##### MullerLyer   

```{r}

ER_mullerlyer <- Error_rate |> filter(Illusion_Type == "MullerLyer")

ER_CongruentMild_mullerlye_BF <- BayesFactor::ttestBF(
  x = ER_mullerlyer$error_rate[ER_mullerlyer$Condition_Illusion == "Congruent"],
  y = ER_mullerlyer$error_rate[ER_mullerlyer$Condition_Illusion == "Mild"],
  paired = TRUE
)

ER_StrongMild_mullerlye_BF <- BayesFactor::ttestBF(
  x = ER_mullerlyer$error_rate[ER_mullerlyer$Condition_Illusion == "Mild"],
  y = ER_mullerlyer$error_rate[ER_mullerlyer$Condition_Illusion == "Strong"],
  paired = TRUE
)

```

##### Vertical-Horizontal    

```{r}

ER_verticalhorizontal  <- Error_rate |> filter(Illusion_Type == "VerticalHorizontal")


ER_CongruentMild_vh_BF <- BayesFactor::ttestBF(
  x = ER_verticalhorizontal$error_rate[ER_verticalhorizontal$Condition_Illusion == "Congruent"],
  y = ER_verticalhorizontal$error_rate[ER_verticalhorizontal$Condition_Illusion == "Mild"],
  paired = TRUE
)

ER_StrongMild_vh_BF <- BayesFactor::ttestBF(
  x = ER_verticalhorizontal$error_rate[ER_verticalhorizontal$Condition_Illusion == "Mild"],
  y = ER_verticalhorizontal$error_rate[ER_verticalhorizontal$Condition_Illusion == "Strong"],
  paired = TRUE
)


```

:::

### IES 

**Note.** The IES is calculated by dividing the average correct RT by the proportion of correct responses, for each illusion and for each illusion strenght group: Strong Illusion Strength & Incongruent, Mild Illusion Strength & Incongruent, and Congruent

```{r}

IES <- data_ig |>
  group_by(Participant, Illusion_Type, Condition_Illusion) |>
  summarise(
    mean_RT = mean(RT[Response_Correct == "true"], na.rm = TRUE),  # Only calculate mean RT for correct responses
    correct_proportion = mean(Response_Correct == "true", na.rm = TRUE),  # Proportion of correct responses
    IES = mean_RT / correct_proportion  # Compute IES
  )

IES

``` 

#### Difference in IES between each condition and illusion type

::: {.panel-tabset}

##### Ebbinghaus 

```{r}

IES_ebbinghaus <- IES |> filter(Illusion_Type == "Ebbinghaus")

BF_Congruent_vs_Mild_ebbinghaus <- BayesFactor::ttestBF(
  x = IES_ebbinghaus$IES[IES_ebbinghaus$Condition_Illusion == "Congruent"],
  y = IES_ebbinghaus$IES[IES_ebbinghaus$Condition_Illusion == "Mild"],
  paired = TRUE
)

BF_Mild_vs_Strong_ebbinghaus <- BayesFactor::ttestBF(
  x = IES_ebbinghaus$IES[IES_ebbinghaus$Condition_Illusion == "Mild"],
  y = IES_ebbinghaus$IES[IES_ebbinghaus$Condition_Illusion == "Strong"],
  paired = TRUE
)

```

##### MullerLyer   

```{r}

IES_mullerlyer <- IES |> filter(Illusion_Type == "MullerLyer")

BF_Congruent_vs_Mild_mullerlyer <- BayesFactor::ttestBF(
  x = IES_mullerlyer$IES[IES_mullerlyer$Condition_Illusion == "Congruent"],
  y = IES_mullerlyer$IES[IES_mullerlyer$Condition_Illusion == "Mild"],
  paired = TRUE
)

BF_Mild_vs_Strong_mullerlyer <- BayesFactor::ttestBF(
  x = IES_mullerlyer$IES[IES_mullerlyer$Condition_Illusion == "Mild"],
  y = IES_mullerlyer$IES[IES_mullerlyer$Condition_Illusion == "Strong"],
  paired = TRUE
)

```

##### Vertical-Horizontal    

```{r}

IES_verticalhorizontal  <- IES |> filter(Illusion_Type == "VerticalHorizontal")

BF_Congruent_vs_Mild_verticalhorizontal <- BayesFactor::ttestBF(
  x = IES_verticalhorizontal$IES[IES_verticalhorizontal$Condition_Illusion == "Congruent"],
  y = IES_verticalhorizontal$IES[IES_verticalhorizontal$Condition_Illusion == "Mild"],
  paired = TRUE
)

BF_Mild_vs_Strong_verticalhorizontal <- BayesFactor::ttestBF(
  x = IES_verticalhorizontal$IES[IES_verticalhorizontal$Condition_Illusion == "Mild"],
  y = IES_verticalhorizontal$IES[IES_verticalhorizontal$Condition_Illusion == "Strong"],
  paired = TRUE
)

```

:::

### Correlations 

**Note**. If correlations high between mild and strong conditions then the mild and strong illusion strength groups will be collapsed and the outcomes will be recomputed across all trials, otherwise they will be treated as separate in subsequent analyses.

#### Error Rate

```{r}

ER_Incongruent_eb <- Error_rate |> filter(Condition_Illusion != "Congruent" & Illusion_Type == "Ebbinghaus")
BayesFactor::correlationBF(
  y = ER_Incongruent_eb$error_rate[ER_Incongruent_eb$Condition_Illusion == "Mild"], 
  x = ER_Incongruent_eb$error_rate[ER_Incongruent_eb$Condition_Illusion == "Strong"])


ER_Incongruent_ml <- Error_rate |> filter(Condition_Illusion != "Congruent" & Illusion_Type == "MullerLyer")
BayesFactor::correlationBF(
  y = ER_Incongruent_ml$error_rate[ER_Incongruent_ml$Condition_Illusion == "Mild"], 
  x = ER_Incongruent_ml$error_rate[ER_Incongruent_ml$Condition_Illusion == "Strong"])

ER_Incongruent_vh <- Error_rate |> filter(Condition_Illusion != "Congruent" & Illusion_Type == "VerticalHorizontal")
BayesFactor::correlationBF(
  y = ER_Incongruent_vh$error_rate[ER_Incongruent_vh$Condition_Illusion == "Mild"], 
  x = ER_Incongruent_vh$error_rate[ER_Incongruent_vh$Condition_Illusion == "Strong"])
  
```

#### IES

```{r}

IES_Incongruent_eb <- IES |> filter(Condition_Illusion != "Congruent" & Illusion_Type == "Ebbinghaus")
BayesFactor::correlationBF(
  y = IES_Incongruent_eb$IES[IES_Incongruent_eb$Condition_Illusion == "Mild"], 
  x = IES_Incongruent_eb$IES[IES_Incongruent_eb$Condition_Illusion == "Strong"])


IES_Incongruent_ml <- IES |> filter(Condition_Illusion != "Congruent" & Illusion_Type == "MullerLyer")
BayesFactor::correlationBF(
  y = IES_Incongruent_ml$IES[IES_Incongruent_ml$Condition_Illusion == "Mild"], 
  x = IES_Incongruent_ml$IES[IES_Incongruent_ml$Condition_Illusion == "Strong"])

IES_Incongruent_vh <- IES|> filter(Condition_Illusion != "Congruent" & Illusion_Type == "VerticalHorizontal")
BayesFactor::correlationBF(
  y = IES_Incongruent_vh$IES[IES_Incongruent_vh$Condition_Illusion == "Mild"], 
  x = IES_Incongruent_vh$IES[IES_Incongruent_vh$Condition_Illusion == "Strong"])
  
```


### Reliability 

*Note*. Reliability analyses are conducted on all resulting indices.

#### Split-half 

```{r}


```

#### Inter-illusion reliability 

```{r}



``` 
